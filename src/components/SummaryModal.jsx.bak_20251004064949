import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Copy, MessageCircle } from 'lucide-react';

const SummaryModal = ({ summaryText, stats, selectedList = [], onApplySelection, onClose, onCopy, onWhatsApp }) => {
  const [localSelection, setLocalSelection] = React.useState(() => selectedList.map(g => g.Name));
  const initialNames = React.useMemo(() => selectedList.map(g => g.Name), [selectedList]);
  const hasChanges = React.useMemo(() => {
    const a = new Set(initialNames);
    const b = new Set(localSelection);
    if (a.size !== b.size) return true;
    for (const n of a) if (!b.has(n)) return true;
    return false;
  }, [initialNames, localSelection]);

  React.useEffect(() => {
    setLocalSelection(selectedList.map(g => g.Name));
  }, [selectedList]);

  // Real-time derived stats based on localSelection
  const derived = React.useMemo(() => {
    const selected = selectedList.filter(g => localSelection.includes(g.Name));
    const selectedCount = selected.length;
    const totalSizeNum = selected.reduce((sum, g) => sum + (parseFloat(g.SizeGB) || 0), 0);
    let totalPriceNum = totalSizeNum;
    if (totalSizeNum > 100) totalPriceNum /= 2; // same rule as App
    totalPriceNum = Math.round(totalPriceNum / 5) * 5;
    if (selectedCount > 0 && totalPriceNum < 20) totalPriceNum = 20;
    return {
      selectedCount,
      totalSize: totalSizeNum.toFixed(2),
      totalPrice: totalPriceNum.toFixed(2)
    };
  }, [localSelection, selectedList]);

  const applyAndClose = () => {
    if (hasChanges) {
      onApplySelection && onApplySelection(localSelection);
    }
    onClose && onClose();
  };

  // Apply without closing the modal
  const applyOnly = () => {
    if (hasChanges) {
      onApplySelection && onApplySelection(localSelection);
    }
    // If no games selected at all, dismiss the popup to avoid empty summary
    if (derived.selectedCount === 0) {
      onClose && onClose();
    }
  };

  // Discard without closing the modal
  const discardOnly = () => {
    setLocalSelection(initialNames);
  };

  const discardAndClose = () => {
    // Discard changes (revert to initialNames) and close
    setLocalSelection(initialNames);
    onClose && onClose();
  };

  const removedNames = React.useMemo(() => {
    const a = new Set(initialNames);
    const b = new Set(localSelection);
    const removed = [];
    for (const n of a) if (!b.has(n)) removed.push(n);
    return removed;
  }, [initialNames, localSelection]);

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/90"
        onClick={(e) => { /* ignore background clicks */ }}
      >
        <motion.div
          initial={{ opacity: 0, scale: 0.9, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          transition={{ type: "spring", damping: 25, stiffness: 300 }}
          className="rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] sm:max-h-[80vh] overflow-hidden mx-2 sm:mx-0"
          style={{ backgroundColor: '#1E2128', color: '#E5E7EB' }}
          onClick={(e) => e.stopPropagation()}
        >
          {/* Header */}
          <div
            className="flex items-center justify-between p-4 sm:p-6 border-b"
            style={{ borderColor: 'rgba(255,255,255,0.06)', backgroundColor: '#1E2128' }}
          >
            <div className="flex items-center space-x-2 sm:space-x-3 space-x-reverse">
              <h2 className="text-lg sm:text-xl font-bold">
                {hasChanges ? 'ØªØ£ÙƒÙŠØ¯ Ø§Ù„ØªØºÙŠÙŠØ±Ø§Øª' : 'Ù…Ù„Ø®Øµ Ø§Ù„Ø·Ù„Ø¨'}
              </h2>
            </div>
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={applyAndClose}
              className="p-2 rounded-full transition-colors duration-200"
              style={{ backgroundColor: 'transparent' }}
            >
              <X className="h-5 w-5" style={{ color: '#9AA1AD' }} />
            </motion.button>
          </div>
          {/* Stats Summary (real-time) aligned with FloatingSummary tiles */}
          <div className="p-4 sm:p-6 border-b" style={{ borderColor: 'rgba(255,255,255,0.06)' }}>
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4">
              {/* Count tile */}
              <div className="flex items-center gap-3 sm:gap-4 p-3 sm:p-4 rounded-lg" style={{ backgroundColor: '#1E2128', border: '1px solid rgba(255,255,255,0.06)' }}>
                <div className="w-10 h-10 rounded-lg flex items-center justify-center" style={{ background: '#039be4' }}>
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5" style={{ color: '#FFFFFF' }}>
                    <rect x="3" y="3" width="7" height="7" />
                    <rect x="14" y="3" width="7" height="7" />
                    <rect x="14" y="14" width="7" height="7" />
                    <rect x="3" y="14" width="7" height="7" />
                  </svg>
                </div>
                <div>
                  <div className="text-xs" style={{ color: '#9AA1AD' }}>Ø§Ù„Ø£Ù„Ø¹Ø§Ø¨</div>
                  <div className="text-base sm:text-lg font-bold" style={{ color: '#E5E7EB' }}>{derived.selectedCount}</div>
                </div>
              </div>

              {/* Size tile */}
              <div className="flex items-center gap-3 sm:gap-4 p-3 sm:p-4 rounded-lg" style={{ backgroundColor: '#1E2128', border: '1px solid rgba(255,255,255,0.06)' }}>
                <div className="w-10 h-10 rounded-lg flex items-center justify-center" style={{ background: '#1E2128' }}>
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5" style={{ color: '#039be4' }}>
                    <path d="M4 14a2 2 0 0 1 2-2h3" />
                    <path d="M4 10a2 2 0 0 0 2 2h3" />
                    <rect x="9" y="7" width="6" height="10" rx="2" />
                  </svg>
                </div>
                <div>
                  <div className="text-xs" style={{ color: '#9AA1AD' }}>Ø§Ù„Ø­Ø¬Ù…</div>
                  <div className="text-base sm:text-lg font-bold" style={{ color: '#E5E7EB' }}>{derived.totalSize} GB</div>
                </div>
              </div>

              {/* Price tile */}
              <div className="flex items-center gap-3 sm:gap-4 p-3 sm:p-4 rounded-lg" style={{ backgroundColor: '#1E2128', border: '1px solid rgba(255,255,255,0.06)' }}>
                <div className="w-10 h-10 rounded-lg flex items-center justify-center text-lg" style={{ background: '#1E2128', color: '#039be4' }}>ðŸ’°</div>
                <div>
                  <div className="text-xs" style={{ color: '#9AA1AD' }}>Ø§Ù„Ø³Ø¹Ø±</div>
                  <div className="text-base sm:text-lg font-bold" style={{ color: '#039be4' }}>{derived.totalPrice} Ø¬Ù†ÙŠÙ‡</div>
                </div>
              </div>
            </div>
          </div>
          {/* Changes summary and actions */}
          <div className="p-4 sm:p-6 border-t" style={{ borderColor: 'rgba(255,255,255,0.06)' }}>
            {hasChanges && removedNames.length > 0 && (
              <div className="mb-3">
                <div className="text-sm font-bold mb-1" style={{ color: '#dc2626' }}>Ø³ÙŠØªÙ… Ø¥Ø²Ø§Ù„Ø© Ø§Ù„Ø£Ù„Ø¹Ø§Ø¨ Ø§Ù„ØªØ§Ù„ÙŠØ©:</div>
                <ul className="list-disc pr-5 text-sm space-y-1" style={{ color: '#E5E7EB' }}>
                  {removedNames.map(name => (
                    <li key={`removed-${name}`}>{name}</li>
                  ))}
                </ul>
              </div>
            )}

            {!hasChanges ? (
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => { onApplySelection && onApplySelection(localSelection); onWhatsApp && onWhatsApp(); }}
                  className="w-full inline-flex items-center justify-center gap-2 h-12 px-3 rounded-lg font-semibold shadow-sm focus:outline-none transition"
                  style={{ backgroundColor: '#25D366', color: '#FFFFFF' }}
                  aria-label="Ø§Ø±Ø³Ø§Ù„ Ø¹Ù† Ø·Ø±ÙŠÙ‚ Ø§Ù„ÙˆØ§ØªØ³Ø§Ø¨"
                >
                  <MessageCircle className="h-4 w-4" />
                  <span className="text-sm">Ø§Ø±Ø³Ø§Ù„ Ø¹Ù† Ø·Ø±ÙŠÙ‚ Ø§Ù„ÙˆØ§ØªØ³Ø§Ø¨</span>
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => { onApplySelection && onApplySelection(localSelection); onCopy && onCopy(); }}
                  className="w-full inline-flex items-center justify-center gap-2 h-12 px-3 rounded-lg font-semibold shadow-sm transition"
                  style={{ backgroundColor: '#039be4', color: '#FFFFFF' }}
                  aria-label="Ù†Ø³Ø® Ø§Ù„Ù‚Ø§Ø¦Ù…Ø©"
                >
                  <Copy className="h-4 w-4" />
                  <span className="text-sm">Ù†Ø³Ø® Ø§Ù„Ù‚Ø§Ø¦Ù…Ø©</span>
                </motion.button>
              </div>
            ) : (
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={applyOnly}
                  className="w-full inline-flex items-center justify-center gap-2 h-12 px-3 rounded-lg font-semibold shadow-sm transition"
                  style={{ backgroundColor: '#039be4', color: '#FFFFFF' }}
                  aria-label="ØªØ·Ø¨ÙŠÙ‚ Ø§Ù„ØªØºÙŠÙŠØ±Ø§Øª"
                >
                  <span className="text-sm">ØªØ·Ø¨ÙŠÙ‚ Ø§Ù„ØªØºÙŠÙŠØ±Ø§Øª</span>
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={discardOnly}
                  className="w-full inline-flex items-center justify-center gap-2 h-12 px-3 rounded-lg font-semibold shadow-sm transition"
                  style={{ backgroundColor: 'transparent', color: '#9AA1AD', border: '1px solid rgba(255,255,255,0.06)' }}
                  aria-label="ØªØ¬Ø§Ù‡Ù„ Ø§Ù„ØªØºÙŠÙŠØ±Ø§Øª"
                >
                  <span className="text-sm">ØªØ¬Ø§Ù‡Ù„ Ø§Ù„ØªØºÙŠÙŠØ±Ø§Øª</span>
                </motion.button>
              </div>
            )}
          </div>

export default SummaryModal;
